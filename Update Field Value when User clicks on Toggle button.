// Create a custom component
<template>
    <c-toggle-button-output 
        checked={value} 
        button-disabled={typeAttributes.buttonDisabled} 
        row-id={typeAttributes.rowId}>
    </c-toggle-button-output>
</template>
Custom comp JS
import toggleButtonColumnTemplate from './toggleButtonColumnTemplate.html';
export default class CustomTypeComponent extends LightningDatatable {
static customTypes = {
toggleButton: {
            template: toggleButtonColumnTemplate,
            standardCellLayout: true,
            typeAttributes: ['buttonDisabled', 'rowId'],
        }
    }
    Open custom datatable component
    <c-custom-datatable 
    onselectedrec={handleSelectedRec}>
    </c-custom-datatable>
    <template if:true = {savecase}>
    <lightning-button variant = brand label = "save" onclick = {saveClidata} ></lightning-button>
    <lightning-button varianr = brand label = "cancel" onclick = {clearcliData}></lightning-button>
    </template>
    
    custom datatable comp JS
   import updateToggle from '@salesforce/apex/rmaCaseLineItemController.updateToggle';
    const columns = [ 
    { label: 'Approval Status', fieldName: 'Approval_status__c', type: 'toggleButton', disabled: false, initialWidth: 120,
           typeAttributes: { 
                buttonDisabled: { fieldName:'Approval_status__c' }, 
                rowId: { fieldName: 'getrowIs' }, 
            }
        }
        ]
        
    export...........{
    saveCase = false;
    handleSelectedRec(event){
     this.saveCase = true;
      this.currentRecordId=event.detail.value;
        const entries = Object.entries(this.currentRecordId);
         updateToggle({cliId: entries[0][1]})
          .then(() => {
              console.log("updated the record succesfully");
               this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Records Updated Successfully!!',
                    variant: 'success'
                })
            );     
            return refreshApex(this.caseLineItems);
             
        })
        .catch((error) => {
            this.errorMessage=error;
             this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error',
                    message: 'An Error Occured!!',
                    variant: 'error'                 
                    
                })
            );
			console.log('unable to update the record due to'+JSON.stringify(this.errorMessage));
        });
    }
    }
    // handle button functinalities and toast messages
    saveClidata(){
       console.log("Updated the records!");
        this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Records Updated Successfully!!',
                    variant: 'success'
                })
            );
   }
   clearcliData(){
       console.log("Canceled");
        this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Canceled',
                    message: 'Canceled',
                    variant: 'Canceled'
                })
            );
   }
